package test

import (
	"testing"

	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

func TestTerraformCompleteExample(t *testing.T) {
	terraformOptions := &terraform.Options{
		// website::tag::1:: Set the path to the Terraform code that will be tested.
		TerraformDir: "../examples/complete",

		// Disable colors in Terraform commands so its easier to parse stdout/stderr
		NoColor: true,
	}

	// website::tag::4:: Clean up resources with "terraform destroy" at the end of the test.
	defer terraform.Destroy(t, terraformOptions)

	// website::tag::2:: Run "terraform init" and "terraform apply". Fail the test if there are any errors.
	terraform.InitAndApply(t, terraformOptions)

	// website::tag::3:: Run `terraform output` to get the values of output variables and check they have the expected values.
	actualConfluentOperator := terraform.Output(t, terraformOptions, "confluent_operator")
	actualZookeeper := terraform.Output(t, terraformOptions, "zookeeper")
	actualKafka := terraform.Output(t, terraformOptions, "kafka")
	actualKafkaTopics := terraform.Output(t, terraformOptions, "kafka_topics")

	expectedConfluentOperator := "map[app_version:2.4.0 chart_version:0.517.12 namespace:confluent]"
	expectedZookeeper := "map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> peers:<nil> server:<nil>] dataVolumeCapacity:10Gi headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-zookeeper:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] logVolumeCapacity:10Gi metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:<nil> fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:<nil>] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:3 storageClass:map[name:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedKafka := "map[authorization:map[superUsers:<nil> type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:<nil>] dataVolumeCapacity:10Gi dependencies:map[kafkaRest:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[endpoint:<nil> kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:<nil>] zookeeper:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] identityProvider:map[ldap:map[address:<nil> authentication:map[simple:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] configurations:map[groupMemberAttribute:<nil> groupMemberAttributePattern:<nil> groupNameAttribute:<nil> groupObjectClass:<nil> groupSearchBase:<nil> groupSearchFilter:<nil> groupSearchScope:<nil> userMemberOfAttributePattern:<nil> userNameAttribute:<nil> userObjectClass:<nil> userSearchBase:<nil> userSearchFilter:<nil> userSearchScope:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] type:<nil>] image:map[application:confluentinc/cp-server:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] listeners:map[custom:<nil> external:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] externalAccess:map[loadBalancer:map[advertisedPort:<nil> annotations:<nil> bootstrapPrefix:<nil> brokerPrefix:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> bootstrapPrefix:<nil> brokerPrefix:<nil> domain:<nil> labels:<nil> wildcardPolicy:<nil>] staticForHostBasedRouting:map[brokerPrefix:<nil> domain:<nil> port:<nil>] staticForPortBasedRouting:map[host:<nil> portOffset:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] internal:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]] metricReporter:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> enabled:true replicationFactor:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> passwordEncoder:map[directoryPathInContainer:<nil> secretRef:<nil>] podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:<nil> fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:<nil>] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] rackAssignment:map[availabilityZoneCount:<nil> nodeLabels:<nil>] replicas:3 services:map[kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[type:<nil>] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] provider:map[ldap:map[address:<nil> authentication:map[simple:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] configurations:map[groupMemberAttribute:<nil> groupMemberAttributePattern:<nil> groupNameAttribute:<nil> groupObjectClass:<nil> groupSearchBase:<nil> groupSearchFilter:<nil> groupSearchScope:<nil> userMemberOfAttributePattern:<nil> userNameAttribute:<nil> userObjectClass:<nil> userSearchBase:<nil> userSearchFilter:<nil> userSearchScope:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]]] storageClass:map[name:<nil>] telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedKafkaTopics := "map[my-other-topic:map[configs:map[cleanup.policy:delete] kafkaClusterRef:map[name:<nil> namespace:<nil>] kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> kafkaClusterID:<nil> tls:map[directoryPathInContainer:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] kafkaRestClassRef:map[name:<nil> namespace:<nil>] name:<nil> partitionCount:3 replicas:3] my-topic:map[configs:map[cleanup.policy:delete] kafkaClusterRef:map[name:<nil> namespace:<nil>] kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> kafkaClusterID:<nil> tls:map[directoryPathInContainer:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] kafkaRestClassRef:map[name:<nil> namespace:<nil>] name:<nil> partitionCount:3 replicas:3]]"

	assert.Equal(t, expectedConfluentOperator, actualConfluentOperator, "Map %q should match %q", expectedConfluentOperator, actualConfluentOperator)
	assert.Equal(t, expectedZookeeper, actualZookeeper, "Map %q should match %q", expectedZookeeper, actualZookeeper)
	assert.Equal(t, expectedKafka, actualKafka, "Map %q should match %q", expectedKafka, actualKafka)
	assert.Equal(t, expectedKafkaTopics, actualKafkaTopics, "Map %q should match %q", expectedKafkaTopics, actualKafkaTopics)
}
