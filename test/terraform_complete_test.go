package test

import (
	"testing"

	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

func TestTerraformCompleteExample(t *testing.T) {
	terraformOptions := &terraform.Options{
		// website::tag::1:: Set the path to the Terraform code that will be tested.
		TerraformDir: "../examples/complete",

		Vars: map[string]interface{}{
			"create_controlcenter": false, // make test faster
		},

		// Disable colors in Terraform commands so its easier to parse stdout/stderr
		NoColor: true,
	}

	// website::tag::4:: Clean up resources with "terraform destroy" at the end of the test.
	defer terraform.Destroy(t, terraformOptions)

	// website::tag::2:: Run "terraform init" and "terraform apply". Fail the test if there are any errors.
	terraform.InitAndApply(t, terraformOptions)

	// website::tag::3:: Run `terraform output` to get the values of output variables and check they have the expected valuesObjectSpec.
	actualConfluentOperator := terraform.Output(t, terraformOptions, "confluent_operator")
	actualZookeeperManifest := terraform.Output(t, terraformOptions, "zookeeper_manifest")
	actualZookeeperObjectSpec := terraform.Output(t, terraformOptions, "zookeeper_object_spec")
	actualKafkaManifest := terraform.Output(t, terraformOptions, "kafka_manifest")
	actualKafkaObjectSpec := terraform.Output(t, terraformOptions, "kafka_object_spec")
	actualConnectManifest := terraform.Output(t, terraformOptions, "connect_manifest")
	actualConnectObjectSpec := terraform.Output(t, terraformOptions, "connect_object_spec")
	actualKafkaTopicManifests := terraform.Output(t, terraformOptions, "kafka_topic_manifests")
	actualKafkaTopicObjectSpecs := terraform.Output(t, terraformOptions, "kafka_topic_object_specs")
	actualSchemaManifests := terraform.Output(t, terraformOptions, "schema_manifests")
	actualSchemaObjectSpecs := terraform.Output(t, terraformOptions, "schema_object_specs")
	actualSchemaConfigMapData := terraform.Output(t, terraformOptions, "schema_config_map_data")
	actualConnectorManifests := terraform.Output(t, terraformOptions, "connector_manifests")
	actualConnectorObjectSpecs := terraform.Output(t, terraformOptions, "connector_object_specs")

	expectedConfluentOperator := "map[app_version:2.4.0 chart_version:0.517.12 namespace:confluent]"
	expectedZookeeperManifest := "map[apiVersion:platform.confluent.io/v1beta1 kind:Zookeeper metadata:map[name:zookeeper namespace:confluent] spec:map[dataVolumeCapacity:10Gi image:map[application:confluentinc/cp-zookeeper:7.2.0 init:confluentinc/confluent-init-container:2.4.0] logVolumeCapacity:10Gi replicas:3]]"
	expectedZookeeperObjectSpec := "map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> peers:<nil> server:<nil>] dataVolumeCapacity:10Gi headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-zookeeper:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] logVolumeCapacity:10Gi metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:<nil> fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:<nil>] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:3 storageClass:map[name:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedKafkaManifest := "map[apiVersion:platform.confluent.io/v1beta1 kind:Kafka metadata:map[name:kafka namespace:confluent] spec:map[dataVolumeCapacity:10Gi image:map[application:confluentinc/cp-server:7.2.0 init:confluentinc/confluent-init-container:2.4.0] metricReporter:map[enabled:true] replicas:3]]"
	expectedKafkaObjectSpec := "map[authorization:map[superUsers:<nil> type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:<nil>] dataVolumeCapacity:10Gi dependencies:map[kafkaRest:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[endpoint:<nil> kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:<nil>] zookeeper:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] identityProvider:map[ldap:map[address:<nil> authentication:map[simple:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] configurations:map[groupMemberAttribute:<nil> groupMemberAttributePattern:<nil> groupNameAttribute:<nil> groupObjectClass:<nil> groupSearchBase:<nil> groupSearchFilter:<nil> groupSearchScope:<nil> userMemberOfAttributePattern:<nil> userNameAttribute:<nil> userObjectClass:<nil> userSearchBase:<nil> userSearchFilter:<nil> userSearchScope:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] type:<nil>] image:map[application:confluentinc/cp-server:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] listeners:map[custom:<nil> external:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] externalAccess:map[loadBalancer:map[advertisedPort:<nil> annotations:<nil> bootstrapPrefix:<nil> brokerPrefix:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> bootstrapPrefix:<nil> brokerPrefix:<nil> domain:<nil> labels:<nil> wildcardPolicy:<nil>] staticForHostBasedRouting:map[brokerPrefix:<nil> domain:<nil> port:<nil>] staticForPortBasedRouting:map[host:<nil> portOffset:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] internal:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]] metricReporter:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> enabled:true replicationFactor:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> passwordEncoder:map[directoryPathInContainer:<nil> secretRef:<nil>] podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:<nil> fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:<nil>] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] rackAssignment:map[availabilityZoneCount:<nil> nodeLabels:<nil>] replicas:3 services:map[kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[type:<nil>] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] provider:map[ldap:map[address:<nil> authentication:map[simple:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] configurations:map[groupMemberAttribute:<nil> groupMemberAttributePattern:<nil> groupNameAttribute:<nil> groupObjectClass:<nil> groupSearchBase:<nil> groupSearchFilter:<nil> groupSearchScope:<nil> userMemberOfAttributePattern:<nil> userNameAttribute:<nil> userObjectClass:<nil> userSearchBase:<nil> userSearchFilter:<nil> userSearchScope:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]]] storageClass:map[name:<nil>] telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedConnectManifest := "map[apiVersion:platform.confluent.io/v1beta1 kind:Connect metadata:map[name:connect namespace:confluent] spec:map[build:map[onDemand:map[plugins:map[confluentHub:[map[name:kafka-connect-datagen owner:confluentinc version:0.5.2]] locationType:confluentHub]] type:onDemand] dependencies:map[kafka:map[bootstrapEndpoint:kafka:9071]] image:map[application:confluentinc/cp-server-connect:7.2.0 init:confluentinc/confluent-init-container:2.4.0] replicas:1]]"
	expectedConnectObjectSpec := "map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] authorization:map[kafkaRestClassRef:map[name:<nil> namespace:<nil>] type:<nil>] build:map[onDemand:map[plugins:map[confluentHub:[map[name:kafka-connect-datagen owner:confluentinc version:0.5.2]] locationType:confluentHub url:<nil>] storageLimit:<nil>] type:onDemand] configOverrides:map[jvm:<nil> log4j:<nil> server:<nil>] connectorOverridePolicy:<nil> connectorTLSCerts:<nil> dependencies:map[admin:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] consumer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] interceptor:map[configs:<nil> consumer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] enabled:<nil> producer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] publishMs:<nil>] kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:kafka:9071 discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] producer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:<nil>]] enableSchemas:<nil> externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-server-connect:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> internalTopicReplicationFactor:<nil> k8sClusterDomain:<nil> keyConverterType:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:<nil> fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:<nil>] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] valueConverterType:<nil>]"
	expectedKafkaTopicManifests := "map[my-other-topic:map[apiVersion:platform.confluent.io/v1beta1 kind:KafkaTopic metadata:map[name:my-other-topic namespace:confluent] spec:map[configs:map[cleanup.policy:compact] partitionCount:3 replicas:3]] pageviews:map[apiVersion:platform.confluent.io/v1beta1 kind:KafkaTopic metadata:map[name:pageviews namespace:confluent] spec:map[configs:map[cleanup.policy:delete] partitionCount:3 replicas:3]]]"
	expectedKafkaTopicObjectSpecs := "map[my-other-topic:map[configs:map[cleanup.policy:compact] kafkaClusterRef:map[name:<nil> namespace:<nil>] kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> kafkaClusterID:<nil> tls:map[directoryPathInContainer:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] kafkaRestClassRef:map[name:<nil> namespace:<nil>] name:<nil> partitionCount:3 replicas:3] pageviews:map[configs:map[cleanup.policy:delete] kafkaClusterRef:map[name:<nil> namespace:<nil>] kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> kafkaClusterID:<nil> tls:map[directoryPathInContainer:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] kafkaRestClassRef:map[name:<nil> namespace:<nil>] name:<nil> partitionCount:3 replicas:3]]"
	expectedSchemaObjectSpecs := "map[pageviews-value:map[compatibilityLevel:<nil> data:map[configRef:pageviews-value-config format:avro] name:<nil> schemaReferences:<nil> schemaRegistryClusterRef:map[name:<nil> namespace:<nil>] schemaRegistryRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> kafkaClusterID:<nil> tls:map[directoryPathInContainer:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]]]"
	expectedSchemaManifests := "map[pageviews-value:map[apiVersion:platform.confluent.io/v1beta1 kind:Schema metadata:map[name:pageviews-value namespace:confluent] spec:map[data:map[configRef:pageviews-value-config format:avro]]]]"
	expectedSchemaConfigMapData := "map[pageviews-value:map[schema:{\n    \"connect.name\": \"ksql.pageviews\",\n    \"fields\": [\n        {\n            \"name\": \"viewtime\",\n            \"type\": \"long\"\n        },\n        {\n            \"name\": \"userid\",\n            \"type\": \"string\"\n        },\n        {\n            \"name\": \"pageid\",\n            \"type\": \"string\"\n        }\n    ],\n    \"name\": \"pageviews\",\n    \"namespace\": \"ksql\",\n    \"type\": \"record\"\n}\n]]"
	expectedConnectorManifests := "map[pageviews-source:map[apiVersion:platform.confluent.io/v1beta1 kind:Connector metadata:map[name:pageviews-source namespace:confluent] spec:map[class:io.confluent.kafka.connect.datagen.DatagenConnector configs:map[iterations:10000000 kafka.topic:pageviews key.converter:org.apache.kafka.connect.storage.StringConverter max.interval:100 quickstart:pageviews value.converter:io.confluent.connect.avro.AvroConverter value.converter.schema.registry.url:http://schemaregistry.confluent.svc.cluster.local:8081 value.converter.schemas.enable:true] connectClusterRef:map[name:connect] taskMax:1]]]"
	expectedConnectorObjectSpecs := "map[pageviews-source:map[class:io.confluent.kafka.connect.datagen.DatagenConnector configs:map[iterations:10000000 kafka.topic:pageviews key.converter:org.apache.kafka.connect.storage.StringConverter max.interval:100 quickstart:pageviews value.converter:io.confluent.connect.avro.AvroConverter value.converter.schema.registry.url:http://schemaregistry.confluent.svc.cluster.local:8081 value.converter.schemas.enable:true] connectClusterRef:map[name:connect namespace:<nil>] connectRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> kafkaClusterID:<nil> tls:map[directoryPathInContainer:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] name:<nil> restartPolicy:map[maxRetry:<nil> type:<nil>] taskMax:1]]"

	assert.Equal(t, expectedConfluentOperator, actualConfluentOperator, "Map %q should match %q", expectedConfluentOperator, actualConfluentOperator)
	assert.Equal(t, expectedZookeeperManifest, actualZookeeperManifest, "Map %q should match %q", expectedZookeeperManifest, actualZookeeperManifest)
	assert.Equal(t, expectedZookeeperObjectSpec, actualZookeeperObjectSpec, "Map %q should match %q", expectedZookeeperObjectSpec, actualZookeeperObjectSpec)
	assert.Equal(t, expectedKafkaManifest, actualKafkaManifest, "Map %q should match %q", expectedKafkaManifest, actualKafkaManifest)
	assert.Equal(t, expectedKafkaObjectSpec, actualKafkaObjectSpec, "Map %q should match %q", expectedKafkaObjectSpec, actualKafkaObjectSpec)
	assert.Equal(t, expectedConnectManifest, actualConnectManifest, "Map %q should match %q", expectedConnectManifest, actualConnectManifest)
	assert.Equal(t, expectedConnectObjectSpec, actualConnectObjectSpec, "Map %q should match %q", expectedConnectObjectSpec, actualConnectObjectSpec)
	assert.Equal(t, expectedKafkaTopicManifests, actualKafkaTopicManifests, "Map %q should match %q", expectedKafkaTopicManifests, actualKafkaTopicManifests)
	assert.Equal(t, expectedKafkaTopicObjectSpecs, actualKafkaTopicObjectSpecs, "Map %q should match %q", expectedKafkaTopicObjectSpecs, actualKafkaTopicObjectSpecs)
	assert.Equal(t, expectedSchemaManifests, actualSchemaManifests, "Map %q should match %q", expectedSchemaManifests, actualSchemaManifests)
	assert.Equal(t, expectedSchemaObjectSpecs, actualSchemaObjectSpecs, "Map %q should match %q", expectedSchemaObjectSpecs, actualSchemaObjectSpecs)
	assert.Equal(t, expectedSchemaConfigMapData, actualSchemaConfigMapData, "Map %q should match %q", expectedSchemaConfigMapData, actualSchemaConfigMapData)
	assert.Equal(t, expectedConnectorManifests, actualConnectorManifests, "Map %q should match %q", expectedConnectorManifests, actualConnectorManifests)
	assert.Equal(t, expectedConnectorObjectSpecs, actualConnectorObjectSpecs, "Map %q should match %q", expectedConnectorObjectSpecs, actualConnectorObjectSpecs)
}
