package test

import (
	"testing"

	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
)

func TestTerraformConfluentPlatformSinglenodeExample(t *testing.T) {
	terraformOptions := &terraform.Options{
		// website::tag::1:: Set the path to the Terraform code that will be tested.
		TerraformDir: "../examples/confluent_platform_singlenode",

		// Disable colors in Terraform commands so its easier to parse stdout/stderr
		NoColor: true,
	}

	// website::tag::4:: Clean up resources with "terraform destroy" at the end of the test.
	defer terraform.Destroy(t, terraformOptions)

	// website::tag::2:: Run "terraform init" and "terraform apply". Fail the test if there are any errors.
	terraform.InitAndApply(t, terraformOptions)

	// website::tag::3:: Run `terraform output` to get the values of output variables and check they have the expected values.
	actualZookeeper := terraform.Output(t, terraformOptions, "zookeeper")
	actualKafka := terraform.Output(t, terraformOptions, "kafka")
	actualConnect := terraform.Output(t, terraformOptions, "connect")
	actualKsqlDB := terraform.Output(t, terraformOptions, "ksqldb")
	actualControlCenter := terraform.Output(t, terraformOptions, "controlcenter")
	actualSchemaRegistry := terraform.Output(t, terraformOptions, "schemaregistry")
	actualKafkaRestProxy := terraform.Output(t, terraformOptions, "kafkarestproxy")

	expectedZookeeper := "map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> peers:<nil> server:<nil>] dataVolumeCapacity:10Gi headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-zookeeper:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] logVolumeCapacity:10Gi metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:100m memory:256Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 storageClass:map[name:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedKafka := "map[authorization:map[superUsers:<nil> type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:[confluent.license.topic.replication.factor=1 confluent.metrics.reporter.topic.replicas=1 confluent.tier.metadata.replication.factor=1 confluent.metadata.topic.replication.factor=1 confluent.balancer.topic.replication.factor=1 confluent.security.event.logger.exporter.kafka.topic.replicas=1 event.logger.exporter.kafka.topic.replicas=1 offsets.topic.replication.factor=1 confluent.cluster.link.enable=true password.encoder.secret=secret]] dataVolumeCapacity:10Gi dependencies:map[kafkaRest:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[endpoint:<nil> kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:<nil>] zookeeper:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] identityProvider:map[ldap:map[address:<nil> authentication:map[simple:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] configurations:map[groupMemberAttribute:<nil> groupMemberAttributePattern:<nil> groupNameAttribute:<nil> groupObjectClass:<nil> groupSearchBase:<nil> groupSearchFilter:<nil> groupSearchScope:<nil> userMemberOfAttributePattern:<nil> userNameAttribute:<nil> userObjectClass:<nil> userSearchBase:<nil> userSearchFilter:<nil> userSearchScope:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] type:<nil>] image:map[application:confluentinc/cp-server:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] listeners:map[custom:<nil> external:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] externalAccess:map[loadBalancer:map[advertisedPort:<nil> annotations:<nil> bootstrapPrefix:<nil> brokerPrefix:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> bootstrapPrefix:<nil> brokerPrefix:<nil> domain:<nil> labels:<nil> wildcardPolicy:<nil>] staticForHostBasedRouting:map[brokerPrefix:<nil> domain:<nil> port:<nil>] staticForPortBasedRouting:map[host:<nil> portOffset:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] internal:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] principalMappingRules:<nil> type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]] metricReporter:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> enabled:true replicationFactor:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> passwordEncoder:map[directoryPathInContainer:<nil> secretRef:<nil>] podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:200m memory:512Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] rackAssignment:map[availabilityZoneCount:<nil> nodeLabels:<nil>] replicas:1 services:map[kafkaRest:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[type:<nil>] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] provider:map[ldap:map[address:<nil> authentication:map[simple:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] configurations:map[groupMemberAttribute:<nil> groupMemberAttributePattern:<nil> groupNameAttribute:<nil> groupObjectClass:<nil> groupSearchBase:<nil> groupSearchFilter:<nil> groupSearchScope:<nil> userMemberOfAttributePattern:<nil> userNameAttribute:<nil> userObjectClass:<nil> userSearchBase:<nil> userSearchFilter:<nil> userSearchScope:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]]] storageClass:map[name:<nil>] telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedConnect := "map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] authorization:map[kafkaRestClassRef:map[name:<nil> namespace:<nil>] type:<nil>] build:map[onDemand:map[plugins:map[confluentHub:<nil> locationType:<nil> url:<nil>] storageLimit:<nil>] type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:[config.storage.replication.factor=1 offset.storage.replication.factor=1 status.storage.replication.factor=1]] connectorOverridePolicy:<nil> connectorTLSCerts:<nil> dependencies:map[admin:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] consumer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] interceptor:map[configs:<nil> consumer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] enabled:<nil> producer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] publishMs:<nil>] kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:kafka:9071 discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] producer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:<nil>]] enableSchemas:<nil> externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-server-connect:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> internalTopicReplicationFactor:<nil> k8sClusterDomain:<nil> keyConverterType:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:5 initialDelaySeconds:<nil> periodSeconds:10 successThreshold:<nil> timeoutSeconds:500] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:100m memory:256Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] valueConverterType:<nil>]"
	expectedKsqlDB := "map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] authorization:map[kafkaRestClassRef:map[name:<nil> namespace:<nil>] type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:<nil>] dataVolumeCapacity:10Gi dependencies:map[interceptor:map[configs:<nil> consumer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] enabled:<nil> producer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] publishMs:<nil>] kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:http://schemaregistry.confluent.svc.cluster.local:8081]] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-ksqldb-server:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> internalTopicReplicationFactor:1 k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:5 initialDelaySeconds:<nil> periodSeconds:10 successThreshold:<nil> timeoutSeconds:500] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:100m memory:256Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 storageClass:map[name:<nil>] telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedControlCenter := "map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] ldap:map[debug:<nil> property:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] authorization:map[kafkaRestClassRef:map[name:<nil> namespace:<nil>] type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:[confluent.controlcenter.command.topic.replication=1 confluent.controlcenter.replication.factor=1 confluent.metrics.reporter.topic.replicas=1 confluent.metrics.topic.replication=1 confluent.monitoring.interceptor.topic.replication=1 confluent.controlcenter.internal.topics.replication=1]] dataVolumeCapacity:10Gi dependencies:map[connect:[map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] name:connect-dev tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:http://connect.confluent.svc.cluster.local:8083]] kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] ksqldb:[map[advertisedUrl:<nil> authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] name:ksql-dev tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:http://ksqldb.confluent.svc.cluster.local:8088]] mds:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] clusters:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:http://schemaregistry.confluent.svc.cluster.local:8081]] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:minikube.domain externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:loadBalancer] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] id:<nil> image:map[application:confluentinc/cp-enterprise-control-center:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> internalTopicReplicatorFactor:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] mail:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] checkServerIdentity:<nil> hostname:<nil> mailBounceAddress:<nil> mailFrom:<nil> port:<nil> startTLSRequired:<nil>] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] monitoringKafkaClusters:<nil> mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] name:<nil> oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:5 initialDelaySeconds:<nil> periodSeconds:10 successThreshold:<nil> timeoutSeconds:500] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:500m memory:512Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 storageClass:map[name:<nil>] telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedSchemaRegistry := "map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] authorization:map[kafkaRestClassRef:map[name:<nil> namespace:<nil>] type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:<nil>] dependencies:map[kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]]] enableSchemaExporter:<nil> externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-schema-registry:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> internalTopicReplicatorFactor:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> passwordEncoder:map[directoryPathInContainer:<nil> secretRef:<nil>] podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:100m memory:256Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"
	expectedKafkaRestProxy := "map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] authorization:map[kafkaRestClassRef:map[name:<nil> namespace:<nil>] type:<nil>] configOverrides:map[jvm:<nil> log4j:<nil> server:<nil>] dependencies:map[interceptor:map[configs:<nil> consumer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] enabled:<nil> producer:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] publishMs:<nil>] kafka:map[authentication:map[jaasConfig:map[secretRef:<nil>] jaasConfigPassThrough:map[directoryPathInContainer:<nil> secretRef:<nil>] oauthbearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] bootstrapEndpoint:<nil> discovery:map[name:<nil> namespace:<nil> secretRef:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mds:map[authentication:map[bearer:map[directoryPathInContainer:<nil> secretRef:<nil>] type:<nil>] endpoint:<nil> tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] tokenKeyPair:map[directoryPathInContainer:<nil> secretRef:<nil>]] schemaRegistry:map[authentication:map[basic:map[debug:<nil> directoryPathInContainer:<nil> restrictedRoles:<nil> roles:<nil> secretRef:<nil>] type:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>] url:http://schemaregistry.confluent.svc.cluster.local:8081]] externalAccess:map[loadBalancer:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> domain:<nil> externalTrafficPolicy:<nil> labels:<nil> loadBalancerSourceRanges:<nil> port:<nil> prefix:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] nodePort:map[advertisedURL:map[enabled:<nil> prefix:<nil>] annotations:<nil> externalTrafficPolicy:<nil> host:<nil> labels:<nil> nodePortOffset:<nil> servicePorts:<nil> sessionAffinity:<nil> sessionAffinityConfig:map[clientIP:map[timeoutSeconds:<nil>]]] route:map[annotations:<nil> domain:<nil> labels:<nil> prefix:<nil> wildcardPolicy:<nil>] type:<nil>] headlessService:map[annotations:<nil> labels:<nil> publishNotReadyAddresses:<nil>] image:map[application:confluentinc/cp-kafka-rest:7.2.0 init:confluentinc/confluent-init-container:2.4.0 pullPolicy:<nil> pullSecretRef:<nil>] injectAnnotations:<nil> injectLabels:<nil> k8sClusterDomain:<nil> license:map[directoryPathInContainer:<nil> globalLicense:<nil> secretRef:<nil>] metrics:map[authentication:map[type:<nil>] prometheus:map[blacklist:<nil> rules:<nil> whitelist:<nil>] tls:map[directoryPathInContainer:<nil> enabled:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]] mountedSecrets:<nil> mountedVolumes:map[volumeMounts:<nil> volumes:<nil>] oneReplicaPerNode:<nil> podTemplate:map[affinity:map[nodeAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:map[nodeSelectorTerms:<nil>]] podAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>] podAntiAffinity:map[preferredDuringSchedulingIgnoredDuringExecution:<nil> requiredDuringSchedulingIgnoredDuringExecution:<nil>]] annotations:<nil> envVars:<nil> labels:<nil> podSecurityContext:map[fsGroup:1000 fsGroupChangePolicy:<nil> runAsGroup:<nil> runAsNonRoot:true runAsUser:1000 seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] supplementalGroups:<nil> sysctls:<nil> windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] priorityClassName:<nil> probe:map[liveness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>] readiness:map[failureThreshold:<nil> initialDelaySeconds:<nil> periodSeconds:<nil> successThreshold:<nil> timeoutSeconds:<nil>]] resources:map[limits:<nil> requests:map[cpu:100m memory:256Mi]] securityContext:map[allowPrivilegeEscalation:<nil> capabilities:map[add:<nil> drop:<nil>] privileged:<nil> procMount:<nil> readOnlyRootFilesystem:<nil> runAsGroup:<nil> runAsNonRoot:<nil> runAsUser:<nil> seLinuxOptions:map[level:<nil> role:<nil> type:<nil> user:<nil>] seccompProfile:map[localhostProfile:<nil> type:<nil>] windowsOptions:map[gmsaCredentialSpec:<nil> gmsaCredentialSpecName:<nil> hostProcess:<nil> runAsUserName:<nil>]] serviceAccountName:<nil> terminationGracePeriodSeconds:<nil> tolerations:<nil> topologySpreadConstraints:<nil>] replicas:1 telemetry:map[global:<nil>] tls:map[autoGeneratedCerts:<nil> directoryPathInContainer:<nil> ignoreTrustStoreConfig:<nil> jksPassword:map[secretRef:<nil>] secretRef:<nil>]]"

	assert.Equal(t, expectedZookeeper, actualZookeeper, "Map %q should match %q", expectedZookeeper, actualZookeeper)
	assert.Equal(t, expectedKafka, actualKafka, "Map %q should match %q", expectedKafka, actualKafka)
	assert.Equal(t, expectedConnect, actualConnect, "Map %q should match %q", expectedConnect, actualConnect)
	assert.Equal(t, expectedKsqlDB, actualKsqlDB, "Map %q should match %q", expectedKsqlDB, actualKsqlDB)
	assert.Equal(t, expectedControlCenter, actualControlCenter, "Map %q should match %q", expectedControlCenter, actualControlCenter)
	assert.Equal(t, expectedSchemaRegistry, actualSchemaRegistry, "Map %q should match %q", expectedSchemaRegistry, actualSchemaRegistry)
	assert.Equal(t, expectedKafkaRestProxy, actualKafkaRestProxy, "Map %q should match %q", expectedKafkaRestProxy, actualKafkaRestProxy)
}
