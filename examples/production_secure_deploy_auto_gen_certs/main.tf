module "confluent_platform" {
  source    = "../../"
  namespace = var.namespace

  zookeeper = yamldecode(<<-EOF
    spec:
      authentication:
        type: digest
        jaasConfig:
          secretRef: credential
      tls:
        autoGeneratedCerts: true
    EOF
  )

  kafka = yamldecode(<<-EOF
    spec:
      configOverrides:
        server:
          - "log.file.size=${100 * 1024 * 1024}"
      tls:
        autoGeneratedCerts: true
      listeners:
        internal:
          authentication:
            type: plain
            jaasConfig:
              secretRef: credential
          tls:
            enabled: true
        external:
          authentication:
            type: plain
            jaasConfig:
              secretRef: credential
          externalAccess:
            type: loadBalancer
            loadBalancer:
              domain: my.domain
              brokerPrefix: rb
              bootstrapPrefix: rb
          tls:
            enabled: true
      authorization:
        type: rbac
        superUsers:
        - User:kafka
      services:
        mds:
          tls:
            enabled: true
          tokenKeyPair:
            secretRef: mds-token
          externalAccess:
            type: loadBalancer
            loadBalancer:
              domain: my.domain
              prefix: rb-mds
          provider:
            type: ldap
            ldap:
              address: ldap://ldap.${var.namespace}.svc.cluster.local:389
              authentication:
                type: simple
                simple:
                  secretRef: credential
              configurations:
                groupNameAttribute: cn
                groupObjectClass: group
                groupMemberAttribute: member
                groupMemberAttributePattern: CN=(.*),DC=test,DC=com
                groupSearchBase: dc=test,dc=com
                userNameAttribute: cn
                userMemberOfAttributePattern: CN=(.*),DC=test,DC=com
                userObjectClass: organizationalRole
                userSearchBase: dc=test,dc=com
      dependencies:
        kafkaRest:
          authentication:
            type: bearer
            bearer:
              secretRef: mds-client
        zookeeper:
          endpoint: zookeeper.${var.namespace}.svc.cluster.local:2182
          authentication:
            type: digest
            jaasConfig:
              secretRef: credential
          tls:
            enabled: true
    EOF
  )

  connect = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: my.domain
          prefix: rb-connect
      authorization:
        type: rbac
      dependencies:
        kafka:
          bootstrapEndpoint: kafka.${var.namespace}.svc.cluster.local:9071
          authentication:
            type: plain
            jaasConfig:
              secretRef: credential
          tls:
            enabled: true
        mds:
          endpoint: https://kafka.${var.namespace}.svc.cluster.local:8090
          tokenKeyPair:
            secretRef: mds-token
          authentication:
            type: bearer
            bearer:
              secretRef: connect-mds-client
          tls:
            enabled: true
    EOF
  )

  ksqldb = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: my.domain
          prefix: rb-sr
      authorization:
        type: rbac
      dependencies:
        kafka:
          bootstrapEndpoint: kafka.${var.namespace}.svc.cluster.local:9071
          authentication:
            type: plain
            jaasConfig:
              secretRef: credential
          tls:
            enabled: true
        mds:
          endpoint: https://kafka.${var.namespace}.svc.cluster.local:8090
          tokenKeyPair:
            secretRef: mds-token
          authentication:
            type: bearer
            bearer:
              secretRef: sr-mds-client
          tls:
            enabled: true
    EOF
  )

  controlcenter = yamldecode(<<-EOF
    spec:
      podTemplate:
        probe:
          liveness:
            periodSeconds: 10
            failureThreshold: 1
            timeoutSeconds: 5
      authorization:
        type: rbac
      tls:
        autoGeneratedCerts: true
      dependencies:
        kafka:
          bootstrapEndpoint: kafka.${var.namespace}.svc.cluster.local:9071
          authentication:
            type: plain
            jaasConfig:
              secretRef: credential
          tls:
            enabled: true
        mds:
          endpoint: https://kafka.${var.namespace}.svc.cluster.local:8090
          tokenKeyPair:
            secretRef: mds-token
          authentication:
            type: bearer
            bearer:
              secretRef: c3-mds-client
          tls:
            enabled: true
        connect:
          - name: connect
            url:  https://connect.${var.namespace}.svc.cluster.local:8083
            tls:
              enabled: true
        ksqldb:
          - name: ksqldb
            url:  https://ksqldb.${var.namespace}.svc.cluster.local:8088
            tls:
              enabled: true
        schemaRegistry:
          url: https://schemaregistry.${var.namespace}.svc.cluster.local:8081
          tls:
            enabled: true
    EOF
  )

  schemaregistry = yamldecode(<<-EOF
    spec:
    tls:
      autoGeneratedCerts: true
    externalAccess:
      type: loadBalancer
      loadBalancer:
        domain: my.domain
        prefix: rb-sr
    authorization:
      type: rbac
    dependencies:
      kafka:
        bootstrapEndpoint: kafka.${var.namespace}.svc.cluster.local:9071
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
        tls:
          enabled: true
      mds:
        endpoint: https://kafka.${var.namespace}.svc.cluster.local:8090
        tokenKeyPair:
          secretRef: mds-token
        authentication:
          type: bearer
          bearer:
            secretRef: sr-mds-client
        tls:
          enabled: true
    EOF
  )

  kafkarestproxy = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: my.domain
          prefix: rb-krp
      authorization:
        type: rbac
      dependencies:
        kafka:
          bootstrapEndpoint: kafka.${var.namespace}.svc.cluster.local:9071
          authentication:
            type: plain
            jaasConfig:
              secretRef: credential
          tls:
            enabled: true
        mds:
          endpoint: https://kafka.${var.namespace}.svc.cluster.local:8090
          tokenKeyPair:
            secretRef: mds-token
          authentication:
            type: bearer
            bearer:
              secretRef: krp-mds-client
          tls:
            enabled: true
        schemaRegistry:
          url: https://schemaregistry.${var.namespace}.svc.cluster.local:8081
          tls:
            enabled: true
    EOF
  )

  create_zookeeper      = false
  create_kafka          = false
  create_connect        = false
  create_ksqldb         = false
  create_controlcenter  = false
  create_schemaregistry = false
  create_kafkarestproxy = false

  kafka_rest_classes = {
    "default" = {
      values = yamldecode(<<-EOF
        spec:
          kafkaRest:
            authentication:
              type: bearer
              bearer:
                secretRef: rest-credential
        EOF
      )
    }
  }

  kafka_topics = {
    "my-topic" = {
      values = yamldecode(<<-EOF
        spec:
          replicas: 1
          partitionCount: 1
          kafkaRest:
            authentication:
              type: bearer
              bearer:
                secretRef: rest-credential
          configs:
            cleanup.policy: "delete"
        EOF
      )
    }
  }
}
