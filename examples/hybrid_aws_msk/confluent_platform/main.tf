module "confluent_platform" {
  source    = "../../../"
  namespace = var.namespace

  # Kafka and Zookeeper are managed by AWS MSK
  create_zookeeper = false
  create_kafka     = false

  create_connect        = false
  create_ksqldb         = false
  create_controlcenter  = var.create_controlcenter
  create_schemaregistry = false
  create_kafkarestproxy = false

  connect = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      dependencies:
        kafka:
          bootstrapEndpoint: ${data.aws_msk_cluster.msk.bootstrap_brokers}
    EOF
  )

  ksqldb = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      dependencies:
        kafka:
          bootstrapEndpoint: ${data.aws_msk_cluster.msk.bootstrap_brokers}
    EOF
  )

  controlcenter = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      dependencies:
        kafka:
          bootstrapEndpoint: ${data.aws_msk_cluster.msk.bootstrap_brokers}
        schemaRegistry:
          url: https://schemaregistry.${var.namespace}.svc.cluster.local:8081
          tls:
            enabled: true
        ksqldb:
        - name: ksql-dev
          url: https://ksqldb.${var.namespace}.svc.cluster.local:8088
          tls:
            enabled: true
        connect:
        - name: connect-dev
          url:  https://connect.${var.namespace}.svc.cluster.local:8083
          tls:
            enabled: true
    EOF
  )

  schemaregistry = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      dependencies:
        kafka:
          bootstrapEndpoint: ${data.aws_msk_cluster.msk.bootstrap_brokers}
    EOF
  )

  kafkarestproxy = yamldecode(<<-EOF
    spec:
      tls:
        autoGeneratedCerts: true
      dependencies:
        kafka:
          bootstrapEndpoint: ${data.aws_msk_cluster.msk.bootstrap_brokers}
        schemaRegistry:
          url: https://schemaregistry.${var.namespace}.svc.cluster.local:8081
          tls:
            enabled: true
    EOF
  )
}
